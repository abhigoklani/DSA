#include <iostream>
#include <cstring>
using namespace std;

int n;
int wines[1001];
int dp[1001][1001];

int solve(int start, int end, int year) {
    if (start > end) {
        return 0;
    }

    if (dp[start][end] != -1) {
        return dp[start][end];
    }

    int profitStart = wines[start] * year + solve(start + 1, end, year + 1);
    int profitEnd = wines[end] * year + solve(start, end - 1, year + 1);

    return dp[start][end] = max(profitStart, profitEnd);
}

int main() {
    memset(dp, -1, sizeof(dp));

    cin >> n;

    for (int i = 0; i < n; i++) {
        cin >> wines[i];
    }

    int result = solve(0, n - 1, 1);
    cout << result << endl;

    return 0;
}


                                                                    or
#include <iostream>
#include <stack>
#include <vector>
using namespace std;

int f(int wine[],int start, int end, int year,vector<vector<int>> dp){
    if(start==end) return year*wine[start];
    if(dp[start][end] != -1) return dp[start][end];
    int choice1 = year*wine[start] + f(wine, start+1, end, year+1,dp);
    int choice2 = year*wine[end] + f(wine, start, end-1, year+1,dp);
    return dp[start][end] = max(choice1,choice2);
}

int main() {
    int wine[] = {2,4,6,2,5};
    int n = sizeof(wine)/sizeof(wine[0])-1;
    vector<vector<int>> dp(100, vector<int>(100, -1));
    cout<<f(wine,0,n,1,dp)<<endl;
    
}
                                                  
